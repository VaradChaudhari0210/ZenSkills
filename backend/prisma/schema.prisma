generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String           @id @default(uuid())
  email                 String           @db.VarChar(100)
  name                  String?
  created_at            DateTime         @default(now()) @db.Timestamptz(6)
  gender                gender_enum?
  is_deleted            Boolean
  location              String?
  password              String
  phone_number          String?          @db.VarChar(13)
  status                UserStatus       @default(active)
  role                  UserRole
  googleAccessToken     String?          @db.VarChar
  googleRefreshToken    String?          @db.VarChar
  googleTokenExpiryDate DateTime?
  is_verified           Boolean          @default(false)
  mentee                mentee?
  mentor                mentor?
  userBadges            UserBadge[]
  JobApplication        JobApplication[] @relation(map: "job_application_user_fk")
  language              String?          @db.VarChar(100)
  conversations         Conversation[]
  messages              Message[]

  WorkshopBooking WorkshopBooking[]
  SessionBooking  SessionBooking[]

  profilePictureId String? @unique
  profilePicture   Image?  @relation(fields: [profilePictureId], references: [id], onDelete: Cascade)

  credentialsVerified Boolean @default(false)
  MentorVerification MentorVerification?


  @@unique(name: "account_id", [email, role])
  CommunityQuestion CommunityQuestion[]
  CommunityAnswer CommunityAnswer[]
}

model mentee {
  id           String            @id @default(uuid())
  bio          String?
  mentee_title String            @db.VarChar(50)
  company      String?           @db.VarChar(255)
  user_id      String            @unique
  User         User?             @relation(fields: [user_id], references: [id], onDelete: Cascade)
  interests    tags[]            @relation("MenteeTags")
  education    MenteeEducation[]
  Review       Review[]          @relation(map: "review_mentee_fk")
  referrals Referral[]
  ratings MenteeRating[]
}

model mentor {
  id                         String            @id @default(uuid())
  bio                        String?
  experience_years           Int               @default(0)
  experience_months          Int               @default(0)
  rating                     Float?            @db.Real
  number_of_mentees_mentored Int               @default(0)
  company                    String?           @db.VarChar(255)
  mentor_job_title           String            @db.VarChar(50)
  user_id                    String            @unique
  User                       User?             @relation(fields: [user_id], references: [id], onDelete: Cascade)
  expertise                  tags[]            @relation("MentorTags")
  number_of_sessions         Int               @default(0)
  credit_score               Float             @default(75)
  education                  MentorEducation[]

  Job Job[] @relation(map: "job_posted_by_fk")

  sessions MentorSession[]

  workshops workshops[]
  Review    Review[]    @relation(map: "review_mentor_fk")

  created_first_session Boolean @default(false)

  TimeSlot TimeSlot[]

  documentId String? @unique

  requestedReferrals Referral[]

  menteeRatings MenteeRating[]
}

model tags {
  tag_id        String   @id @default(uuid())
  tag_name      String?  @unique
  parent_tag_id String?
  parent        tags?    @relation("TagHierarchy", fields: [parent_tag_id], references: [tag_id])
  children      tags[]   @relation("TagHierarchy")
  mentees       mentee[] @relation("MenteeTags")
  mentors       mentor[] @relation("MentorTags")
}

model tempuser {
  id           String   @id(map: "tempuser_pk") @default(uuid())
  email        String   @db.VarChar(100)
  phone_number String?  @db.VarChar(13)
  created_at   DateTime @default(now()) @db.Timestamptz(6)
  password     String
  role         UserRole

  @@unique(name: "account_id", [email, role])
}

enum gender_enum {
  Male
  Female
  Other
  Prefer_not_to_say
}

enum UserStatus {
  active
  inactive
  suspended
}

enum UserRole {
  admin
  mentor
  mentee
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model Job {
  id                    String               @id @default(uuid())
  title                 String               @db.VarChar(255)
  description           String
  company_name          String               @db.VarChar(255)
  company_details       String               @db.VarChar(255)
  location              String               @db.VarChar(255)
  work_schedule         WorkSchedule
  work_location         WorkLocation
  employment_categories EmploymentCategory[]
  qualifications        String
  benefits              String
  app_details           String
  posted_by             String?
  mentor                mentor?              @relation(fields: [posted_by], references: [id], onDelete: Cascade)
  created_at            DateTime             @default(now())
  updated_at            DateTime             @updatedAt
  deadline              DateTime
  salary                String?              @default("10,000 INR - 15,000 INR")
  status                JobStatus            @default(active)
  job_applications      JobApplication[]
}

model JobApplication {
  id               String   @id @default(uuid())
  job_id           String
  uid              String
  name             String   @db.VarChar(50)
  phone_number     String   @db.VarChar(13)
  email            String   @db.VarChar(100)
  cover_letter     String?
  resume_url       String   @db.VarChar(255)
  application_date DateTime @default(now())
  job              Job      @relation(fields: [job_id], references: [id], onDelete: Cascade)
  user             User     @relation(fields: [uid], references: [id], onDelete: Cascade)
}

enum WorkSchedule {
  FullTime
  PartTime
}

enum WorkLocation {
  Remote
  Onsite
}

enum EmploymentCategory {
  Internship
  Government
  Freelance
  Contract
}

enum JobStatus {
  active
  closed
}

model Badge {
  id          String @id @default(uuid())
  badge_name  String @db.VarChar(255)
  description String @db.Text

  userBadges UserBadge[]
}

model UserBadge {
  id         String   @id @default(uuid())
  userId     String
  badgeId    String
  userRole   UserRole
  assignedAt DateTime @default(now())

  badge Badge @relation(fields: [badgeId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@index([userId, badgeId])
}

model MentorEducation {
  id                     String  @id @default(uuid())
  mentor_id              String
  educationQualification String  @db.VarChar(255)
  companyName            String? @db.VarChar(255)

  mentor mentor @relation(fields: [mentor_id], references: [id], onDelete: Cascade)

  @@index([mentor_id])
}

model MenteeEducation {
  id                     String  @id @default(uuid())
  mentee_id              String
  educationQualification String  @db.VarChar(255)
  companyName            String? @db.VarChar(255)

  mentee mentee @relation(fields: [mentee_id], references: [id], onDelete: Cascade)

  @@index([mentee_id])
}

model workshops {
  id                String            @id @default(uuid())
  title             String
  description       String
  date              DateTime
  duration          Int
  workshop_image_id String            @unique
  workshop_image    Image             @relation(fields: [workshop_image_id], references: [id], onDelete: Cascade)
  created_at        DateTime          @default(now())
  created_by        String
  status            WorkshopStatus?   @default(upcoming)
  mentor            mentor            @relation(fields: [created_by], references: [id], onDelete: Cascade)
  updated_at        DateTime          @updatedAt
  max_participants  Int
  deadline          DateTime
  visibility        visibility        @default(Public)
  WorkshopBooking   WorkshopBooking[]

  @@index([created_by])
}

model WorkshopBooking {
  id          String   @id @default(uuid())
  workshop_id String
  user_id     String
  attended    Boolean  @default(false) // New field to track attendance
  created_at  DateTime @default(now())

  workshop workshops @relation(fields: [workshop_id], references: [id])
  user     User      @relation(fields: [user_id], references: [id])

  @@unique([workshop_id, user_id])
  @@index([workshop_id])
  @@index([user_id])
}

enum visibility {
  Public
  Private
  MentorsOnly
}

enum WorkshopStatus {
  upcoming
  completed
  cancelled
}

model Review {
  id          String   @id @default(uuid())
  mentee_id   String
  mentor_id   String
  rating      Float
  description String?  @db.Text
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  mentee mentee @relation(fields: [mentee_id], references: [id], onDelete: Cascade, map: "review_mentee_fk")
  mentor mentor @relation(fields: [mentor_id], references: [id], onDelete: Cascade, map: "review_mentor_fk")

  @@index([mentee_id, mentor_id])
}

model MentorSession {
  id              String               @id @default(uuid())
  name            String
  description     String
  durationMinutes Int
  topics          MentorSessionTopic[]
  mentor_id       String
  mentor          mentor               @relation(fields: [mentor_id], references: [id])

  SessionBooking SessionBooking[]
}

model MentorSessionTopic {
  id       String          @id @default(uuid())
  name     String          @unique
  sessions MentorSession[]
}

model TimeSlot {
  id        String @id @default(uuid())
  day       Day
  // from DateTime @db.Time()
  // to DateTime @db.Time()
  from      String
  to        String
  mentor_id String
  mentor    mentor @relation(fields: [mentor_id], references: [id])
}

enum Day {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

model Conversation {
  id         String           @id @default(uuid())
  title      String?
  type       ConversationType
  created_at DateTime         @default(now()) @db.Timestamptz(6)
  messages   Message[]
  users      User[]
}

enum ConversationType {
  PRIVATE
  GROUP
}

model Message {
  id              String       @id @default(uuid())
  sender_id       String
  sender          User         @relation(fields: [sender_id], references: [id], onDelete: Cascade)
  conversation_id String
  conversation    Conversation @relation(fields: [conversation_id], references: [id], onDelete: Cascade)
  content         String
  type            MessageType
  attachment      Attachment?
  created_at      DateTime     @default(now()) @db.Timestamptz(6)
  updated_at      DateTime     @default(now()) @db.Timestamptz(6)
}

enum MessageType {
  USER
  SYSTEM
}

model Attachment {
  id         String   @id @default(uuid())
  filename   String
  path       String
  size       Int
  message_id String?  @unique
  message    Message? @relation(fields: [message_id], references: [id])
}

model Image {
  id       String     @id @default(uuid())
  filename String
  path     String
  size     Int
  mimeType String
  workshop workshops?
  user     User?
}

enum BookingStatus {
  pending
  accepted
  rejected
  rescheduled
  cancelled
  completed
}

model SessionBooking {
  id         String        @id @default(uuid())
  session_id String
  user_id    String?
  status     BookingStatus @default(pending)
  start_time DateTime
  end_time   DateTime
  date       DateTime
  event_id   String? // Add this line
  created_at DateTime      @default(now())
  room_id    String?

  session MentorSession @relation(fields: [session_id], references: [id], onDelete: Cascade)
  user    User?         @relation(fields: [user_id], references: [id])
}

model MentorVerification {
  id                String   @id @default(uuid())
  user_id           String   @unique
  government_id_document_id      String @unique
  government_id Document @relation("government_id", fields: [government_id_document_id], references: [id], onDelete: Cascade)
  government_id_type government_id_type
  work_email        String?
  linkedin_profile  String?
  additional_info   String?
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  user            User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  degree_certificate_document_id String? @unique
  degree_certificate Document? @relation("degree_certificate", fields: [degree_certificate_document_id], references: [id], onDelete: Cascade)
  additional_file_document_id           String?  @unique
  additional_file Document? @relation("additional_file", fields: [additional_file_document_id], references: [id], onDelete: Cascade)
}

enum government_id_type {
  aadhar
  pan
  voter_id
  passport
  driving_license
  other
}

model Document {
  id String @id @default(uuid())
  filename String
  path String
  size Int
  mimeType String
  government_id     MentorVerification? @relation("government_id")
  degree_certificate MentorVerification? @relation("degree_certificate")
  additional_file    MentorVerification? @relation("additional_file")
  referral Referral?
}

model Referral {
  id String @id @default(uuid())
  mentor_id String
  mentor mentor @relation(fields: [mentor_id], references: [id], onDelete: Cascade)
  mentee_id String
  mentee mentee @relation(fields: [mentee_id], references: [id], onDelete: Cascade)
  job_url String
  description String
  reason String
  resume_id String @unique
  resume Document @relation(fields: [resume_id], references: [id], onDelete: Cascade)
  status ReferralStatus
}

enum ReferralStatus {
  PENDING
  ACCEPTED
}

model MenteeRating {
  id String @id @default(uuid())
  rating Int
  comment String
  mentee_id String
  mentee mentee @relation(fields: [mentee_id], references: [id], onDelete: Cascade)
  from_id String
  from mentor @relation(fields: [from_id], references: [id], onDelete: Cascade)
}

model CommunityQuestion {
  id    String @id @default(uuid())
  question  String
  created_at    DateTime @default(now())
  answers     Int
  q_user_id     String
  user        User @relation(fields: [q_user_id], references: [id]) 

  CommunityAnswer CommunityAnswer[]
}

model CommunityAnswer {
  id    String @id @default(uuid())
  answer  String
  created_at    DateTime @default(now())
  communityQuestion_id     String
  a_user_id     String
  user        User @relation(fields: [a_user_id], references: [id]) 
  community        CommunityQuestion @relation(fields: [communityQuestion_id], references: [id]) 
}
