generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(uuid())
  email         String       @unique(map: "user_unique_1") @db.VarChar(100)
  created_at    DateTime     @db.Timestamptz(6) @default(now())
  gender        gender_enum?
  is_deleted    Boolean
  location      String?
  password      String
  phone_number  String?      @db.VarChar(13)
  status        UserStatus   @default(active)
  role          UserRole
  googleId      String?      @unique(map: "user_unique") @db.VarChar
  is_verified   Boolean      @default(false)
  mentee        mentee[]
  mentor        mentor[]

  JobApplication JobApplication[] @relation(map: "job_application_user_fk")
}

model mentee {
  name             String       @db.VarChar(50)
  bio              String?
  mentee_id        String             @id(map: "mentee_pk") @default(uuid())
  id              String
  mentee_title     String             @db.VarChar(50) 
  company          String?            @db.VarChar(255)
  User             User?              @relation(fields: [id], references: [id], onDelete: Cascade, map: "mentee_user_fk")
  mentee_interests mentee_interests[]
}

model mentee_interests {
  mentee_id           String
  tag_id              String
  mentee_interests_id String @id(map: "mentee_interests_pk") @default(uuid())
  mentee              mentee @relation(fields: [mentee_id], references: [mentee_id], onDelete: Cascade, map: "mentee_interests_mentee_fk")
  tags                tags   @relation(fields: [tag_id], references: [tag_id], onDelete: Cascade, map: "mentee_interests_tags_fk")
}

model mentor {
  id                         String
  name                       String             @db.VarChar(50)
  bio                        String?
  experience_years           Int                @default(0)
  mentor_id                  String             @id(map: "mentor_pk") @default(uuid())
  rating                     Float?             @db.Real
  number_of_mentees_mentored Int                @default(0)
  company                    String?            @db.VarChar(255)
  mentor_job_title           String             @db.VarChar(50)
  User                       User               @relation(fields: [id], references: [id], onDelete: Cascade, map: "mentor_user_fk")
  mentor_expertise           mentor_expertise[]
  number_of_sessions         Int                @default(0)
  credit_score               Float              @default(75)           

  Job Job[] @relation(map: "job_posted_by_fk")
}

model mentor_expertise {
  mentor_id           String
  tag_id              String
  mentor_expertise_id String @id(map: "mentor_expertise_pk") @default(uuid())
  mentor              mentor @relation(fields: [mentor_id], references: [mentor_id], onDelete: Cascade, map: "mentor_expertise_mentor_fk")
  tags                tags   @relation(fields: [tag_id], references: [tag_id], onDelete: Cascade, map: "mentor_expertise_tags_fk")
}

model tags {
  tag_id          String    @id @default(uuid())
  tag_name        String?    
  parent_tag_id   String?
  parent          tags?     @relation("TagHierarchy", fields: [parent_tag_id], references: [tag_id])
  children        tags[]    @relation("TagHierarchy")
  mentee_interests mentee_interests[]
  mentor_expertise mentor_expertise[]
}

model tempuser {
  id            String   @id(map: "tempuser_pk") @default(uuid())
  email         String   @unique @db.VarChar(100)
  created_at    DateTime @db.Timestamptz(6) @default(now())
  password      String
  role          UserRole
  expires_at    DateTime
}

enum gender_enum {
  Male
  Female
  Other
  Prefer_not_to_say
}

enum UserStatus {
  active
  inactive
  suspended
}

enum UserRole {
  admin
  mentor
  mentee
}

model Session {
  id          String   @id
  sid         String   @unique
  data        String
  expiresAt   DateTime
}

model Job {
  id               String     @id @default(uuid())
  title            String     @db.VarChar(255)
  description      String
  company_name     String     @db.VarChar(255)
  company_details  String     @db.VarChar(255)
  location         String     @db.VarChar(255)
  job_type         JobType    // Full-time, Part-time, Internship, etc.
  qualifications   String     // Required qualifications
  benefits         String     // Perks and benefits
  app_details      String     // Required Application details 
  posted_by        String     
  mentor           mentor?    @relation(fields: [posted_by], references: [mentor_id], onDelete: Cascade, map: "job_posted_by_fk")
  created_at       DateTime   @default(now())
  updated_at       DateTime   @updatedAt
  deadline         DateTime
  status           JobStatus  @default(active) // Active, Closed
  job_applications JobApplication[]
}

model JobApplication {
  id               String     @id @default(uuid())
  job_id           String
  uid              String
  name             String     @db.VarChar(50)
  phone_number     String     @db.VarChar(13)
  email            String     @db.VarChar(100)
  cover_letter     String?
  resume_url       String     @db.VarChar(255)
  application_date DateTime   @default(now())
  job              Job        @relation(fields: [job_id], references: [id], onDelete: Cascade, map: "job_application_job_fk")
  user             User       @relation(fields: [uid], references: [id], onDelete: Cascade, map: "job_application_user_fk")
}

enum JobType {
  FullTime
  PartTime
  Internship
  Freelance
  Onsite
  Government
  Remote
  Contract
}


enum JobStatus {
  active
  closed
}